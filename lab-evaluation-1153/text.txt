//task5

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <string.h>

typedef struct {
    int student_id;
    char name[50];
    float gpa;
} Student;

pthread_mutex_t print_mutex; // mutex to serialize printing


void* check_deans_list(void* arg) {
    Student* s = (Student*)arg;

    int* eligible = malloc(sizeof(int)); // allocate memory to return result
    if (s->gpa >= 3.5)
        *eligible = 1;
    else
        *eligible = 0;


    pthread_mutex_lock(&print_mutex);

    printf("Student ID: %d\n", s->student_id);
    printf("Name: %s\n", s->name);
    printf("GPA: %.2f\n", s->gpa);
    if (*eligible)
        printf("Status: Eligible for Dean's List\n\n");
    else
        printf("Status: Not eligible for Dean's List\n\n");

    pthread_mutex_unlock(&print_mutex);

    pthread_exit(eligible);
}

int main() {
    #define N 3  

    pthread_t threads[N];
    Student students[N] = {
        {101, "Hamna", 3.8},
        {102, "Fatima", 3.4},
        {103, "Hunzala", 3.9}
    };

    int dean_count = 0;

    pthread_mutex_init(&print_mutex, NULL);


    for (int i = 0; i < N; i++) {
        if (pthread_create(&threads[i], NULL, check_deans_list, &students[i]) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }
    for (int i = 0; i < N; i++) {
        int* eligible;
        pthread_join(threads[i], (void**)&eligible);
        dean_count += *eligible;
        free(eligible);
    }

    pthread_mutex_destroy(&print_mutex);

    printf("Total students on Dean's List: %d\n", dean_count);
    printf("Main thread: Work completed.\n");

    return 0;
}


//task4
#include <stdio.h>
#include <stdlib.h>+
#include <pthread.h>
z
void* factorial(void* arg) {
    int n = *(int*)arg;        
    unsigned long long* result = malloc(sizeof(unsigned long long)); 
    *result = 1;

    for (int i = 1; i <= n; i++) {
        *result *= i;
    }

    pthread_exit(result); 
}

int main() {
    pthread_t thread;
    int num;
    unsigned long long* fact_result;
  printf("Name: Fatima Bashir\n");
    printf("Reg#: 23-NTU-CS-1153\n");

    printf("Enter a number: ");
    scanf("%d", &num);

    if (num < 0) {
        printf("Factorial is not defined for negative numbers.\n");
        return 1;
    }
    if (pthread_create(&thread, NULL, factorial, &num) != 0) {
        perror("Failed to create thread");
        return 1;
    }
    pthread_join(thread, (void**)&fact_result);

    printf("Factorial of %d = %llu\n", num, *fact_result);

    free(fact_result);

    printf("Main thread: Work completed.\n");
    return 0;
}

//task3



#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
void* calculate(void* arg) {
    int num = *(int*)arg; 
    printf("Thread: Number = %d\n", num);
    printf("Thread: Square = %d\n", num * num);
    printf("Thread: Cube   = %d\n", num * num * num);

    pthread_exit(NULL);
}

int main() {
    pthread_t thread; 
    printf("Name: Fatima Bashir\n");
    printf("Reg#: 23-NTU-CS-1153\n");
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    if (pthread_create(&thread, NULL, calculate, &num) != 0) {
        perror("Failed to create thread");
        return 1;
    }
    pthread_join(thread, NULL);
    printf("Main thread: Work completed.\n");
    return 0;
}


//task2

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
void* greet(void* arg) {
    char* name = (char*) arg;
    printf("Thread says: Hello, %s! Welcome to the world of threads.\n", name);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread; 
    printf("Fatima Bashir\n");
    printf("23-NTU-CS-1153\n");
    char* name = "Fatima Bashir";
    if (pthread_create(&thread, NULL, greet, name) != 0) {
        perror("Failed to create thread");
        return 1;
    }
    printf("Main thread: Waiting for greeting...\n");
    pthread_join(thread, NULL);
    printf("Main thread: Greeting completed!\n");
    return 0;
}


//task1

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <time.h>
void* thread_func(void* arg) {
    int thread_num = *(int*)arg;
    pthread_t tid = pthread_self();
    printf("Thread %d started. Thread ID: %lu\n", thread_num, tid);

    int sleep_time = rand() % 3 + 1;
    sleep(sleep_time);

   
    printf("Thread %d (ID: %lu) completed after %d seconds.\n",
           thread_num, tid, sleep_time);

    pthread_exit(NULL);  
}

int main() {
    pthread_t threads[5];    
    int thread_nums[5];      
    srand(time(NULL));       
    printf("Name: Fatima Bashir\n");
    printf("Reg#: 23-NTU-CS-1153\n\n");
    for (int i = 0; i < 5; i++) {
        thread_nums[i] = i + 1; 
        if (pthread_create(&threads[i], NULL, thread_func, &thread_nums[i]) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }
    for (int i = 0; i < 5; i++) {
        pthread_join(threads[i], NULL);
    }
    printf("\nAll threads have completed execution.\n");
    return 0;
}
